<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS Terraform Workshop on Terraform on AWS Workshop</title>
    <link>https://aws-quickstart.github.io/workshop-terraform-modules/</link>
    <description>Recent content in AWS Terraform Workshop on Terraform on AWS Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://aws-quickstart.github.io/workshop-terraform-modules/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Account</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/10_getting_started/1_aws_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/10_getting_started/1_aws_account.html</guid>
      <description>You are responsible for the cost of the AWS services used while running this workshop in your AWS account.
 Your account must have the ability to create new IAM roles and scope other IAM permissions.
 Create an account   If you don&amp;rsquo;t already have an AWS account with Administrator access: create one now
  Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop</description>
    </item>
    
    <item>
      <title>Module Structure</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/20_terraform_module_overview/1_module_stucture.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/20_terraform_module_overview/1_module_stucture.html</guid>
      <description>Basic Module Structure  LICENSE The license under which this module is available. README.md The root module and any nested modules should have README files main.tf, variables.tf, outputs.tf Primary entrypoint of the module /modules Nested modules can be loaded under modules/  </description>
    </item>
    
    <item>
      <title>Module Versioning</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/20_terraform_module_overview/2_module_versioning.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/20_terraform_module_overview/2_module_versioning.html</guid>
      <description>Module Versioning When using AWS Modules we recommend locking to version while calling the module. This ensure that updates only happen when convenient to you.
The example below show how to use versioning</description>
    </item>
    
    <item>
      <title>Signup for Account</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/10_register.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/10_register.html</guid>
      <description>Go here to create an account
  Enter a Username
  Enter an Email
  Enter a Password
  Choose Create account
  </description>
    </item>
    
    <item>
      <title>Create an 0rganization</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/11_register.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/11_register.html</guid>
      <description>##Create Terraform organization
 Name your org eg: aws-devops-workshop- with your gitlab userid appended.  Example: aws-devops-workshop-tonynv
  Provide a Email address
  Click Create organization
  </description>
    </item>
    
    <item>
      <title>Start Trail</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/12_register.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/12_register.html</guid>
      <description>Click Upgrade Now</description>
    </item>
    
    <item>
      <title>Select Trail Plan</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/13_register.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/13_register.html</guid>
      <description>Choose Trial Plan
  Start your free trial
  Expected Output:</description>
    </item>
    
    <item>
      <title>Install terraform in AWS cloud shell</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/40_setup_cloudshell/40_start_cloud_shell.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/40_setup_cloudshell/40_start_cloud_shell.html</guid>
      <description>Go here
Install terraform Download terraform wget https://releases.hashicorp.com/terraform/0.15.1/terraform_0.15.1_linux_amd64.zip
Unzip terraform binaries unzip terraform_0.15.1_linux_amd64.zip
Create home/usr/bin mkdir -p $HOME/.usr/bin
Add terraform to path echo &amp;quot;PATH=\$PATH:\$HOME/.usr/bin&amp;quot; &amp;gt;&amp;gt;~/.bashrc
Restart shell exec bash
Remove zipfile rm terraform_0.15.1_linux_amd64.zip</description>
    </item>
    
    <item>
      <title>Configure Terraform Env </title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/40_setup_cloudshell/41_export_terraform_token.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/40_setup_cloudshell/41_export_terraform_token.html</guid>
      <description>  In CloudShell
 Run terraform login
Confirm by typing yes
Paste the following url into your browser to continue https://app.terraform.io/app/settings/tokens?source=terraform-login
Click Create API token
Click to Copy API token to clipboard
Paste into you CloudShell
Expected output: </description>
    </item>
    
    <item>
      <title>Clone terraform workspace</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/50_clone_module/51_git_clone_workspace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/50_clone_module/51_git_clone_workspace.html</guid>
      <description>Clone vpc module git clone https://github.com/aws-quickstart/terraform-aws-vpc.git</description>
    </item>
    
    <item>
      <title>Setup auto tfvars</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/60_setup_tf_inputs/61_setup_auto_tfvars.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/60_setup_tf_inputs/61_setup_auto_tfvars.html</guid>
      <description>Configure your tfvars file vi $HOME/terraform.tfvars
Create a file that contains the inputs for the vpc module
Setup module inputs AWS_ACCESS_KEY_ID = &amp;quot;*********************&amp;quot; AWS_SECRET_ACCESS_KEY = &amp;quot;*********************&amp;quot; tfe_organization = &amp;quot;the-org-name-you-created&amp;quot; tfe_email = &amp;quot;someone@companyx.com&amp;quot; region = &amp;quot;us-east-2&amp;quot;  (replace *** with AKEY and SKEY) !!!!CAUTION!!!!: In production this method of input is not recommended
 %</description>
    </item>
    
    <item>
      <title>Setup TFC workspace</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/70_deploy_base_infrastructure/71_deploy_base_infra.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/70_deploy_base_infrastructure/71_deploy_base_infra.html</guid>
      <description>Setup Terraform workspace  Change directory to the root directory.  cd terraform-aws-vpc/
 Change to deploy directory  cd setup_workspace.
Execute terraform  Run to following commands in order:  terraform init
Export Terraform Config Location  export TERRAFORM_CONFIG=&amp;quot;$HOME/.terraform.d/credentials.tfrc.json&amp;quot;
terraform apply -var-file=&amp;quot;$HOME/terraform.tfvars&amp;quot;.
Change to the deploy folder cd ../deploy
terraform apply -auto-approve</description>
    </item>
    
    <item>
      <title>Deploy VPC into TFC</title>
      <link>https://aws-quickstart.github.io/workshop-terraform-modules/70_deploy_base_infrastructure/72_deploy_vpc.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-quickstart.github.io/workshop-terraform-modules/70_deploy_base_infrastructure/72_deploy_vpc.html</guid>
      <description>Deploy Terraform in workspace Change directory to deploy dir (previous command auto generates backend.hcl)
cd ../deploy
terraform apply or terraform apply -var-file=&amp;quot;$HOME/.aws/terraform.tfvars&amp;quot;.
Terraform apply is run remotely in Terraform Cloud</description>
    </item>
    
  </channel>
</rss>
