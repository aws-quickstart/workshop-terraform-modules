[
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/",
	"title": "AWS Terraform Workshop",
	"tags": [],
	"description": "",
	"content": "AWS Terraform Workshop Welcome In this workshop you will learn how to use terraform modules to deploy infrastructure on AWS\nLearning Objectives  Terraform Modules on AWS Overview Create Terraform Cloud Account Setup Terraform for Cloud Workspace Build a sample architecture using Terraform Modules   "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/10_getting_started/1_aws_account.html",
	"title": "AWS Account",
	"tags": [],
	"description": "",
	"content": " You are responsible for the cost of the AWS services used while running this workshop in your AWS account.\n Your account must have the ability to create new IAM roles and scope other IAM permissions.\n Create an account   If you don\u0026rsquo;t already have an AWS account with Administrator access: create one now\n  Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop\n  Enter the user details:   Attach the AdministratorAccess IAM Policy:   Click to create the new user:   Take note of the login URL and save:   Please continue to the next section.\n "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/20_terraform_module_overview/1_module_stucture.html",
	"title": "Module Structure",
	"tags": [],
	"description": "",
	"content": "Basic Module Structure  LICENSE The license under which this module is available. README.md The root module and any nested modules should have README files main.tf, variables.tf, outputs.tf Primary entrypoint of the module /modules Nested modules can be loaded under modules/  "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/20_terraform_module_overview/2_module_versioning.html",
	"title": "Module Versioning",
	"tags": [],
	"description": "",
	"content": "Module Versioning When using AWS Modules we recommend locking to version while calling the module. This ensure that updates only happen when convenient to you.\nThe example below show how to use versioning\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/10_getting_started.html",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Getting Started Click here To run this workshop you will need access to an AWS Account\n "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/10_register.html",
	"title": "Signup for Account",
	"tags": [],
	"description": "",
	"content": "Go here to create an account\n  Enter a Username\n  Enter an Email\n  Enter a Password\n  Choose Create account\n  "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/11_register.html",
	"title": "Create an 0rganization",
	"tags": [],
	"description": "",
	"content": "##Create Terraform organization\n Name your org eg: aws-devops-workshop- with your gitlab userid appended.  Example: aws-devops-workshop-tonynv\n  Provide a Email address\n  Click Create organization\n  "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/12_register.html",
	"title": "Start Trail",
	"tags": [],
	"description": "",
	"content": "Click Upgrade Now\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account/13_register.html",
	"title": "Select Trail Plan",
	"tags": [],
	"description": "",
	"content": "  Choose Trial Plan\n  Start your free trial\n  Expected Output:\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/20_terraform_module_overview.html",
	"title": "Terraform Modules Overview",
	"tags": [],
	"description": "",
	"content": "What are modules in terraform ? Terraform modules are a collection of .tf files that are used together to deploy a resource. A module typically consists of Root modules with in a root modules you can also call child modules. Bellow is an example of a module.\nIn this workshop we will use 3 modules (workspace/vpc/db) to build a tf deployment. The module we will reference are opensourced. They part of a catalog of modules published on AWS Infrastructure and Automation cataglog.\n A link to the AWS Terraform Modules Catalog is provided in the navigation bar to the left of your screen\n "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/30_create_terraform_cloud_account.html",
	"title": "Terraform Cloud",
	"tags": [],
	"description": "",
	"content": "Getting Started If you have a existing terraform cloud account you can skip the registeration\n "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/40_setup_cloud9_ide.html",
	"title": "Setup AWS Cloud9",
	"tags": [],
	"description": "",
	"content": "In this lab we are going to start an AWS Cloud9 ide session.\nWe will use this env execute this workshop.\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/40_setup_cloud9_ide/40_start_cloud9.html",
	"title": "Setup Cloud9",
	"tags": [],
	"description": "",
	"content": "Starting AWS Cloud9 IDE AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages and the AWS Command Line Interface (CLI) pre-installed so you don’t need to install files or configure your laptop for this workshop.\nCloud9 works best with Chrome or Firefox, Not Safari. This workshop is not supported on a tablet.\n From the AWS Management Console, Select Services \u0026gt; Cloud9 under Developer Tools\nGo Click here for deeplink to Cloud9\n  Select Create Environment.\n  Enter tf-workshop into Name and optionally provide a Description.\n  Select Next step.\nc9 Launch settings:   Set the Instance type to t2.small (1 GiB RAM + 1 vCPU).\n  Leave all other defaults unchanged.\n  Select Next step\nReview the environment settings and select Create environment.\n It will take a couple of minutes for your Cloud9 environment to be provisioned and prepared.\n c9 Environment settings:  Once ready, your IDE will open to a welcome screen. Below that, you should see a terminal prompt. Close the Welcome tab and drag up the terminal window to give yourself more space to work in.  Configure AWS credentials for your Cloud9 Workspace Click on the Cloud9 logo in the top left corner\n Choose Preferences   In the Preferences tab got to AWS Settings Turn off AWS managed temporary credentials Close the Preferences tab  To ensure temporary credentials aren’t already in place we will also remove any existing credentials file:\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/40_setup_cloud9_ide/41_setup_creds_in_c9.html",
	"title": "Setup AWS Credentials",
	"tags": [],
	"description": "",
	"content": "In Cloud9 Terminal Run aws configure\nCopy the values for AWS ACCESS KEY ID and AWS SECRET ACCESS KEY from the AWS IAM Console. If you have accediently closed this tab you can find the credentials in the csv file that you downloaded in the Getting Started Section.\n   Set: AWS ACCESS KEY ID \u0026lt; Copy and Paste\n  Set: AWS SECRET ACCESS KEY \u0026lt; Copy and Paste\n  Set:Default REGION NAME to : us-west-2\n  Set: Default OUTPUT FORMAT to : None (Just hit enter)\n  Expected Output: Add AWS_REGION Variable to bash_profile echo \u0026quot;export AWS_REGION=us-west-2\u0026quot; | tee -a ~/.bash_profile export AWS_REGION=us-west-2 Validate the IAM user Use the GetCallerIdentity cli command to validate that the Cloud9 IDE is using the correct IAM user.\naws sts get-caller-identity Expected Output: Leave Cloud9 open we will be using cloud9 through out this workshop\n "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/40_setup_cloud9_ide/42_export_terraform_token.html",
	"title": "Configure TFC Enviornment ",
	"tags": [],
	"description": "",
	"content": "In Cloud9 Terminal Run terraform login\n Confirm by typing yes  Paste the following url into your browser to continue https://app.terraform.io/app/settings/tokens?source=terraform-login\nClick Create API token\nClick to Copy API token to clipboard\nPaste into you Cloud9 Terminal\nExpected output: "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/50_clone_module.html",
	"title": "Clone VPC Module",
	"tags": [],
	"description": "",
	"content": "In this lab we will use git to clone the latest version off the aws-quickstart/tfc_workspace/aws module\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/50_clone_module/51_git_clone_workspace.html",
	"title": "Clone terraform workspace",
	"tags": [],
	"description": "",
	"content": "Clone vpc module git clone https://github.com/aws-quickstart/terraform-aws-vpc.git\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/60_setup_tf_inputs.html",
	"title": "Setup Module Inputs",
	"tags": [],
	"description": "",
	"content": "In this lab we will create the terraform vars file which we will used to pass input to the workspace module\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/60_setup_tf_inputs/61_setup_auto_tfvars.html",
	"title": "Setup auto tfvars",
	"tags": [],
	"description": "",
	"content": "Configure your tfvars file vi $HOME/terraform.tfvars\nCreate a file that contains the inputs for the vpc module\nSetup module inputs AWS_ACCESS_KEY_ID = \u0026quot;*********************\u0026quot; AWS_SECRET_ACCESS_KEY = \u0026quot;*********************\u0026quot; tfe_organization = \u0026quot;the-org-name-you-created\u0026quot; tfe_email = \u0026quot;someone@companyx.com\u0026quot; region = \u0026quot;us-east-2\u0026quot;  (replace *** with AKEY and SKEY) !!!!CAUTION!!!!: In production this method of input is not recommended\n %\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/70_deploy_base_infrastructure.html",
	"title": "Deploy base infrastructure",
	"tags": [],
	"description": "",
	"content": "In this module we will create the following resource via terraform:\n  Terraform Cloud Workspace via aws-quickstart/tfc_workspace/aws module\n  AWS VPC via aws-quickstart/vpc/aws module\n  "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/70_deploy_base_infrastructure/71_deploy_base_infra.html",
	"title": "Setup TFC workspace",
	"tags": [],
	"description": "",
	"content": "Setup Terraform workspace  Change directory to the root directory.  cd terraform-aws-vpc/\n Change to deploy directory  cd setup_workspace.\nExecute terraform  Run to following commands in order:  terraform init\nExport Terraform Config Location  export TERRAFORM_CONFIG=\u0026quot;$HOME/.terraform.d/credentials.tfrc.json\u0026quot;\nterraform apply -var-file=\u0026quot;$HOME/terraform.tfvars\u0026quot;.\nChange to the deploy folder cd ../deploy\nterraform apply -auto-approve\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/70_deploy_base_infrastructure/72_deploy_vpc.html",
	"title": "Deploy VPC into TFC",
	"tags": [],
	"description": "",
	"content": "Deploy Terraform in workspace Change directory to deploy dir (previous command auto generates backend.hcl)\ncd ../deploy\nterraform apply or terraform apply -var-file=\u0026quot;$HOME/.aws/terraform.tfvars\u0026quot;.\nTerraform apply is run remotely in Terraform Cloud\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/80_deploy_aurora_into_base.html",
	"title": "Deploy DB into base infrastructure",
	"tags": [],
	"description": "",
	"content": "In this module we will create the following resource via terraform:\n via aws-quickstart/rds-aurora/aws module  By leveraging modular building blocks we can deploy an aurora postgress db into our existing base infrastructure via the Terraform Cloud workspace\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/80_deploy_aurora_into_base/81_add_db.html",
	"title": "Add dB module",
	"tags": [],
	"description": "",
	"content": "Create tfvars files echo \u0026quot;db_vpc_id = $(terraform output vpc_id)\u0026quot; \u0026gt;db.auto.tfvars echo \u0026quot;password = \\\u0026quot;db$(hostid)\\\u0026quot;\u0026quot; \u0026gt;\u0026gt;db.auto.tfvars echo \u0026quot;region = us-east2\u0026quot; \u0026gt;\u0026gt;db.auto.tfvars cat db.auto.tfvars Create db.tf vi db.tf\nCopy to the code snip below into db.tf\nmodule \u0026quot;rds-aurora\u0026quot; { source = \u0026quot;aws-quickstart/rds-aurora/aws\u0026quot; version = \u0026quot;0.0.10\u0026quot; region = var.region vpc_id = var.db_vpc_id password = var.password } Create db_vars.tf vi db_vars.tf\nCopy to the code snip below into db_vars.tf\n variable \u0026quot;db_vpc_id\u0026quot; { type = string description = \u0026quot;VPC id\u0026quot; default = \u0026quot;\u0026quot; } variable \u0026quot;password\u0026quot; { description = \u0026quot;Master DB password\u0026quot; type = string default = \u0026quot;\u0026quot; } "
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/80_deploy_aurora_into_base/82_deploy_db.html",
	"title": "Deploy dB module",
	"tags": [],
	"description": "",
	"content": "Terraform Apply terraform apply -auto-approve\n"
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://aws-quickstart.github.io/workshop-terraform-modules/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]